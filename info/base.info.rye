section "Boolean " "Functions that work with true and false values." {
	group "true" 
	"Returns a boolean true value."
	{
		arg `none`
		returns `boolean true value`
	}

	{
		equal { true } true
		equal { true |type? } 'boolean
	}

	group "false" 
	"Returns a boolean false value."
	{
		arg `none`
		returns `boolean false value`
	}

	{
		equal { false } false
		equal { false |type? } 'boolean
	}

	group "not" 
	"Performs logical negation on boolean values only."
	{
		arg `value: Boolean value to be negated`
		returns `boolean false if the input is true, true if the input is false`
	}

	{
		equal { not true } false
		equal { not false } true
		error { not 0 }
		error { not 5 }
	}

	group "and" 
	"Performs a logical AND operation between two boolean values, or a bitwise AND operation between two integer values."
	{
		arg `value1: First value (boolean or integer)`
		arg `value2: Second value (boolean or integer)`
		returns `boolean result of logical AND operation if both inputs are booleans, otherwise integer result of bitwise AND`
	}

	{
		equal { true .and true } true
		equal { false .and true } false
		equal { true .and false } false
		equal { false .and false } false
		equal { 3 .and 5 } 1  ; bitwise 011 AND 101 = 001
		error { true .and 5 }
		error { 5 .and true }
		error { "string" .and true }
	}

	group "or" 
	"Performs a logical OR operation between two boolean values, or a bitwise OR operation between two integer values."
	{
		arg `value1: First value (boolean or integer)`
		arg `value2: Second value (boolean or integer)`
		returns `boolean result of logical OR operation if both inputs are booleans, otherwise integer result of bitwise OR`
	}

	{
		equal { true .or true } true
		equal { false .or true } true
		equal { true .or false } true
		equal { false .or false } false
		equal { 3 .or 5 } 7  ; bitwise 011 OR 101 = 111
		error { true .or 5 }
		error { 5 .or true }
		error { "string" .or true }
	}

	group "xor" 
	"Performs a logical XOR (exclusive OR) operation between two boolean values, or a bitwise XOR operation between two integer values."
	{
		arg `value1: First value (boolean or integer)`
		arg `value2: Second value (boolean or integer)`
		returns `boolean result of logical XOR operation if both inputs are booleans, otherwise integer result of bitwise XOR`
	}

	{
		equal { true .xor true } false
		equal { false .xor true } true
		equal { true .xor false } true
		equal { false .xor false } false
		equal { 3 .xor 5 } 6  ; bitwise 011 XOR 101 = 110
		error { true .xor 5 }
		error { 5 .xor true }
		error { "string" .xor true }
	}

	group "all" 
	"Evaluates all expressions in a block and returns the last value if all are truthy, or the first falsy value encountered."
	{
		arg `block: Block of expressions to evaluate`
		returns `the last value if all expressions are truthy, otherwise the first falsy value encountered`
	}

	{
		equal { all { 1 2 3 } } 3
		equal { all { 1 0 3 } } 3
		equal { all { 1 false 3 } } false
		equal { all { true true true } } true
		; equal { all { } } ? ; empty block behavior
		error { all "not-a-block" }
	}

	group "any" 
	"Evaluates expressions in a block until a truthy value is found and returns it, or returns the last value if none are truthy."
	{
		arg `block: Block of expressions to evaluate`
		returns `the first truthy value encountered, or the last value if none are truthy`
	}

	{
		equal { any { 1 2 3 } } 1
		equal { any { 0 1 3 } } 0
		equal { any { false false 3 } } 3
		equal { any { false false false } } false
		; equal { any { } } ? ; empty block behavior
		error { any "not-a-block" }
	}

	group "any\\with" 
	"Applies each expression in the block to the provided value until a truthy result is found and returns it."
	{
		arg `value: Value to be used as input to each expression in the block`
		arg `block: Block of expressions to evaluate with the provided value injected`
		returns `the first truthy result of applying an expression to the value, or the last result if none are truthy`
	}

	{
		equal { any\with 10 { + 10 , * 10 } } 20
		equal { any\with 0 { + 10 , * 10 } } 10
		equal { any\with 5 { - 10 , + 10 } } -5
		equal { any\with false { .not , .to-string } } true
		; equal { any\with true { .not , .to-string } } "true"
		error { any\with 5 "not-a-block" }
	}

}

section "Numbers " "Working with numbers, integers and decimals." {
	group "inc" 
	"Increments an integer value by 1."
	{
		arg `value: Integer to increment`
		returns `integer value incremented by 1`
	}

	{
		equal { inc 123 } 124
		equal { inc 0 } 1
		equal { inc -5 } -4
		error { inc "123" }
	}

	group "decr" 
	"Decrements an integer value by 1."
	{
		arg `value: Integer to decrement`
		returns `integer value decremented by 1`
	}

	{
		equal { decr 124 } 123
		equal { decr 1 } 0
		equal { decr -4 } -5
		error { decr "123" }
	}

	group "negate" 
	"Negates a number by multiplying it by -1, works with integers, decimals, and complex numbers."
	{
		arg `value: Number (integer, decimal, or complex) to negate`
		returns `negated number of the same type`
	}

	{
		equal { negate 123 } -123
		equal { negate -123 } 123
		equal { negate 0 } 0
		equal { negate 5.5 } -5.5
		equal { negate -2.3 } 2.3
		error { negate "123" }
	}

	group "invert" 
	"Calculates the reciprocal (1/x) of a number, works with integers, decimals, and complex numbers."
	{
		arg `value: Number (integer, decimal, or complex) to invert (must not be zero)`
		returns `reciprocal (1/value) as decimal or complex number`
	}

	{
		equal { invert 2 } 0.5
		equal { invert 4 } 0.25
		equal { invert 0.5 } 2.0
		equal { invert -2 } -0.5
		equal { invert 1 } 1.0
		error { invert 0 }
		error { invert "123" }
	}

	group "is-positive" 
	"Checks if a number is positive (greater than zero)."
	{
		arg `value: Integer or decimal to check`
		returns `boolean true if the value is positive, false otherwise`
	}

	{
		equal { is-positive 123 } true
		equal { is-positive -123 } false
		equal { is-positive 0 } false
		equal { is-positive 5.5 } true
		error { is-positive "123" }
	}

	group "is-zero" 
	"Checks if a number is exactly zero."
	{
		arg `value: Integer or decimal to check`
		returns `boolean true if the value is zero, false otherwise`
	}

	{
		equal { is-zero 0 } true
		equal { is-zero 123 } false
		equal { is-zero 0.0 } true
		error { is-zero "123" }
	}

	group "is-multiple-of" 
	"Checks if the first integer is evenly divisible by the second integer."
	{
		arg `value: Integer to check`
		arg `divisor: Integer divisor to check against`
		returns `boolean true if value is divisible by divisor with no remainder, false otherwise`
	}

	{
		equal { 10 .is-multiple-of 2 } true
		equal { 10 .is-multiple-of 3 } false
		equal { 15 .is-multiple-of 5 } true
		equal { 0 .is-multiple-of 5 } true
	}

	group "is-odd" 
	"Checks if an integer is odd (not divisible by 2)."
	{
		arg `value: Integer to check`
		returns `boolean true if the value is odd, false if even`
	}

	{
		equal { 3 .is-odd } true
		equal { 2 .is-odd } false
		equal { 0 .is-odd } false
		equal { -5 .is-odd } true
	}

	group "is-even" 
	"Checks if an integer is even (divisible by 2)."
	{
		arg `value: Integer to check`
		returns `boolean true if the value is even, false if odd`
	}

	{
		equal { 3 .is-even } false
		equal { 2 .is-even } true
		equal { 0 .is-even } true
		equal { -4 .is-even } true
	}

	group "mod" 
	"Calculates the modulo (remainder) when dividing the first integer by the second."
	{
		arg `value: Integer dividend`
		arg `divisor: Integer divisor`
		returns `integer remainder after division`
	}

	{
		equal { 4 .mod 2 } 0
		equal { 5 .mod 2 } 1
		equal { 5 .mod 3 } 2
		equal { -5 .mod 3 } -2
	}

	group "_%" 
	"Alias for mod - calculates the modulo (remainder) when dividing the first integer by the second."
	{
		arg `value: Integer dividend`
		arg `divisor: Integer divisor`
		returns `integer remainder after division`
	}

	{
		equal { 4 % 2 } 0
		equal { 5 % 2 } 1
		equal { 5 % 3 } 2
	}

	group "random\\integer" 
	"Generates a cryptographically secure random integer between 0 (inclusive) and the specified maximum (exclusive)."
	{
		arg `max: Upper bound (exclusive) for the random number`
		returns `random integer in the range [0, max)`
	}

	{
		equal { random\integer 2 |type? } 'integer
		equal { random\integer 1 |< 2 } true
		equal { random\integer 100 | >= 0 } true
	}

	group "random\\decimal" 
	"Generates a cryptographically secure random decimal between 0.0 (inclusive) and the specified maximum (exclusive)."
	{
		arg `max: Upper bound (exclusive) for the random number`
		returns `random decimal in the range [0.0, max)`
	}

	{
		equal { random\decimal 2.0 |type? } 'decimal
		equal { random\decimal 1.0 |< 1.0 } true
		equal { random\decimal 100.0 | >= 0.0 } true
	}

	group "inc!" 
	"Increments an integer value stored in a variable (word) by 1 and updates the variable in-place."
	{
		arg `word: Word referring to an integer value to increment`
		returns `the new incremented integer value`
	}

	{
		equal { a:: 123 inc! 'a a } 124
		equal { counter:: 0 inc! 'counter counter } 1
		error { inc! 123 }
	}

	group "decr!" 
	"Decrements an integer value stored in a variable (word) by 1 and updates the variable in-place."
	{
		arg `word: Word referring to an integer value to decrement`
		returns `the new decremented integer value`
	}

	{
		equal { a:: 123 decr! 'a a } 122
		equal { counter:: 1 decr! 'counter counter } 0
		error { decr! 123 }
	}

	group "_." 
	"Discards the input value and returns a void value, useful for ignoring unwanted results in a pipeline."
	{
		arg `value: Any value to discard`
		returns `void value (used to discard values)`
	}

	{
		equal { 4 . .type? } 'void
		equal { "hello" . .type? } 'void
	}

	group "_+" 
	"Adds or joins two values together, with behavior depending on types: adds numbers, concatenates strings/blocks, merges dictionaries, etc."
	{
		arg `value1: First value (number, string, block, dict, etc.)`
		arg `value2: Second value to add or join`
		returns `result of adding or joining the values, type depends on input types`
	}

	{
		equal { 1 + 1 } 2
		equal { 3 + 4 } 7
		equal { 5.6 + 7.8 } 13.400000
		error { "A" + "b" }
		error { "A" + 1 }
		error { { 1 2 } + { 3 4 } } { 1 2 3 4 }
		error { dict { "a" 1 } |+ { "b" 2 } }
		error { dict { "a" 1 } |+ dict { "b" 2 } }
	}

	group "_-" 
	"Subtracts the second number from the first, working with integers, decimals, and complex numbers."
	{
		arg `value1: First number (integer or decimal)`
		arg `value2: Second number to subtract from the first`
		returns `result of subtracting value2 from value1`
	}

	{
		equal { 2 - 1 } 1
		equal { 5 - 6 } -1
		equal { 5.5 - 2.2 } 3.3
		equal { 5 - 2.5 } 2.5
	}

	group "_*" 
	"Multiplies two numbers, working with integers, decimals, and complex numbers."
	{
		arg `value1: First number (integer or decimal)`
		arg `value2: Second number to multiply by`
		returns `product of the two numbers`
	}

	{
		equal { 4 * 2 } 8
		equal { 2.5 * -2 } -5.0
		equal { 0 * 5 } 0
		equal { 1.5 * 2.5 } 3.75
	}

	group "_/" 
	"Divides the first number by the second and returns a result, with error checking for division by zero."
	{
		arg `value1: Dividend (integer or decimal)`
		arg `value2: Divisor (integer or decimal, must not be zero)`
		returns `decimal result of dividing value1 by value2`
	}

	{
		equal { 4 / 2 } 2.000
		equal { 102.0 / 2.0 } 51.000
		equal { 5 / 2 } 2.5
		error { 5 / 0 }
	}

	group "_//" 
	"Performs integer division, dividing the first number by the second and truncating to an integer result."
	{
		arg `value1: Dividend (integer or decimal)`
		arg `value2: Divisor (integer or decimal, must not be zero)`
		returns `integer result of dividing value1 by value2 (truncated)`
	}

	{
		equal { 5 // 2 } 2
		equal { 102 // 5 } 20
		equal { 7.99 // 2 } 3
		equal { -5 // 2 } -2
		error { 5 // 0 }
	}

	group "_=" 
	"Compares two values for equality, returning 1 if equal or 0 if not equal."
	{
		arg `value1: First value to compare`
		arg `value2: Second value to compare`
		returns `boolean true if values are equal, false otherwise`
	}

	{
		equal { 5 = 5 } true
		equal { 5 = 4 } false
		equal { "abc" = "abc" } true
		equal { { 1 2 } = { 1 2 } } true
		equal { { 1 2 } = { 2 1 } } false
	}

	group "_>" 
	"Compares if the first value is greater than the second value."
	{
		arg `value1: First value to compare`
		arg `value2: Second value to compare`
		returns `boolean true if value1 is greater than value2, false otherwise`
	}

	{
		equal { 6 > 5 } true
		equal { 5 > 5 } false
		equal { 4 > 5 } false
		equal { 5.5 > 5 } true
		equal { "b" > "a" } true
	}

	group "_>=" 
	"Compares if the first value is greater than or equal to the second value."
	{
		arg `value1: First value to compare`
		arg `value2: Second value to compare`
		returns `boolean true if value1 is greater than or equal to value2, false otherwise`
	}

	{
		equal { 5 >= 6 } false
		equal { 5 >= 5 } true
		equal { 6.0 >= 5 } true
		equal { 4 >= 5 } false
		equal { "b" >= "a" } true
		equal { "a" >= "a" } true
	}

	group "_<" 
	"Compares if the first value is less than the second value."
	{
		arg `value1: First value to compare`
		arg `value2: Second value to compare`
		returns `boolean true if value1 is less than value2, false otherwise`
	}

	{
		equal { 5 < 6 } true
		equal { 5 < 5 } false
		equal { 6 < 5 } false
		equal { 4.5 < 5 } true
		equal { "a" < "b" } true
	}

	group "_<=" 
	"Compares if the first value is less than or equal to the second value."
	{
		arg `value1: First value to compare`
		arg `value2: Second value to compare`
		returns `boolean true if value1 is less than or equal to value2, false otherwise`
	}

	{
		equal { 5 <= 6 } true
		equal { 5 <= 5 } true
		equal { 6 <= 5 } false
		equal { 4.5 <= 5 } true
		equal { "a" <= "b" } true
		equal { "a" <= "a" } true
	}

	group "recur-if" 
	"Internal recursion control function. Resets function execution if condition > 0, otherwise returns result."
	{
		arg `condition: Integer value, if > 0 triggers recursion reset`
		returns `nil if recursion continues, ps.Res if recursion ends`
	}

	{
	}

	group "recur-if\\1" 
	"Internal recursion control function for single-argument functions. Updates first argument and resets if condition > 0."
	{
		arg `condition: Integer value, if > 0 triggers recursion with updated argument`
		arg `arg1: New value for the first function argument during recursion`
		returns `nil if recursion continues, ps.Res if recursion ends`
	}

	{
	}

	group "recur-if\\2" 
	"Internal recursion control function for two-argument functions. Updates both arguments and resets if condition > 0."
	{
		arg `condition: Integer value, if > 0 triggers recursion with updated arguments`
		arg `arg1: New value for the first function argument during recursion`
		arg `arg2: New value for the second function argument during recursion`
		returns `ps.Res (function result) regardless of condition`
	}

	{
	}

	group "recur-if\\3" 
	"Internal recursion control function for three-argument functions. Updates all three arguments and resets if condition > 0."
	{
		arg `condition: Integer value, if > 0 triggers recursion with updated arguments`
		arg `arg1: New value for the first function argument during recursion`
		arg `arg2: New value for the second function argument during recursion`
		arg `arg3: New value for the third function argument during recursion`
		returns `ps.Res (function result) regardless of condition, nil if recursion continues`
	}

	{
	}

}

section "Strings " "" {
	group "newline" 
	"Returns a string containing a single newline character."
	{
		arg `none`
		returns `a string containing a single newline character`
	}

	{
		equal { newline } "\n"
	}

	group "tab" 
	"Returns a string containing a single tab character."
	{
		arg `none`
		returns `a string containing a single tab character`
	}

	{
		equal { tab } "\t"
	}

	group "ln" 
	"Appends a newline character to the end of a string."
	{
		arg `string: String to append a newline to`
		returns `a new string with a newline character appended`
	}

	{
		equal { "123" .ln } "123\n"
		equal { "hello" .ln } "hello\n"
	}

	group "trim" 
	"Removes all leading and trailing whitespace characters from a string."
	{
		arg `string: String to trim`
		returns `a new string with leading and trailing whitespace removed`
	}

	{
		equal { trim " ASDF " } "ASDF"
		equal { trim "   ASDF   " } "ASDF"
		equal { trim "\t\nASDF\r\n" } "ASDF"
	}

	group "trim\\" 
	"Removes all leading and trailing occurrences of the specified characters from a string."
	{
		arg `string: String to trim`
		arg `cutset: String containing the characters to trim`
		returns `a new string with specified characters removed from both ends`
	}

	{
		equal { trim\ "__ASDF__" "_" } "ASDF"
		equal { trim\ "##Hello##" "#" } "Hello"
	}

	group "trim\\right" 
	"Removes all trailing occurrences of the specified characters from a string."
	{
		arg `string: String to trim`
		arg `cutset: String containing the characters to trim`
		returns `a new string with specified characters removed from the right end`
	}

	{
		equal { trim\right "__ASDF__" "_" } "__ASDF"
		equal { trim\right "  ASDF  " " " } "  ASDF"
		equal { trim\right "Hello!!!" "!" } "Hello"
	}

	group "trim\\left" 
	"Removes all leading occurrences of the specified characters from a string."
	{
		arg `string: String to trim`
		arg `cutset: String containing the characters to trim`
		returns `a new string with specified characters removed from the left end`
	}

	{
		equal { trim\left "___ASDF__" "_" } "ASDF__"
		equal { trim\left "  ASDF  " " " } "ASDF  "
		equal { trim\left "###Hello" "#" } "Hello"
	}

	group "replace" 
	"Replaces all occurrences of a substring with another string."
	{
		arg `string: Original string`
		arg `old: Substring to replace`
		arg `new: Replacement string`
		returns `a new string with all occurrences of old replaced by new`
	}

	{
		equal { replace "...xo..." "xo" "LoL" } "...LoL..."
		equal { replace "...xoxo..." "xo" "LoL" } "...LoLLoL..."
		equal { replace "hello world" "world" "everyone" } "hello everyone"
	}

	group "substring" 
	"Extracts a portion of a string between the specified start and end positions."
	{
		arg `string: String to extract from`
		arg `start: Starting position (0-based, inclusive)`
		arg `end: Ending position (0-based, exclusive)`
		returns `a new string containing the specified substring`
	}

	{
		equal { substring "xoxo..." 0 4 } "xoxo"
		equal { substring "...xoxo..." 3 7 } "xoxo"
		equal { substring "hello world" 6 11 } "world"
	}

	group "contains" 
	"Checks if a string, block or list contains a specific value, returning 1 if found or 0 if not found."
	{
		arg `collection: String, block or list to search in`
		arg `value: Value to search for`
		returns `integer 1 if the collection contains the value, 0 otherwise`
	}

	{
		equal { contains "...xoxo..." "xo"  } true
		equal { contains "...xoxo..." "lol" } false
		equal { contains { ".." "xoxo" ".." } "xoxo" } true
		equal { contains { ".." "xoxo" ".." } "lol"  } false
		equal { contains list { 1 2 3 } 2 } true
	}

	group "has-suffix" 
	"Checks if a string ends with a specific suffix, returning 1 if true or 0 if false."
	{
		arg `string: String to check`
		arg `suffix: Suffix to look for`
		returns `integer 1 if the string ends with the suffix, 0 otherwise`
	}

	{
		equal { has-suffix "xoxo..." "xoxo" } 0
		equal { has-suffix "...xoxo" "xoxo" } 1
		equal { has-suffix "hello.txt" ".txt" } 1
	}

	group "has-prefix" 
	"Checks if a string starts with a specific prefix, returning 1 if true or 0 if false."
	{
		arg `string: String to check`
		arg `prefix: Prefix to look for`
		returns `integer 1 if the string starts with the prefix, 0 otherwise`
	}

	{
		equal { has-prefix "xoxo..." "xoxo" } 1
		equal { has-prefix "...xoxo" "xoxo" } 0
		equal { has-prefix "http://example.com" "http://" } 1
	}

	group "index?" 
	"Finds the 0-based index of the first occurrence of a value in a string or block."
	{
		arg `collection: String or block to search in`
		arg `value: Value to search for`
		returns `integer index (0-based) of the first occurrence of the value, or -1 if not found`
	}

	{
		equal { index? "...xo..." "xo" } 3
		equal { index? "xo..." "xo" } 0
		equal { index? { "xo" ".." } "xo" } 0
		equal { index? { ".." "xo" ".." } "xo" } 1
	}

	group "position?" 
	"Finds the 1-based position of the first occurrence of a value in a string or block."
	{
		arg `collection: String or block to search in`
		arg `value: Value to search for`
		returns `integer position (1-based) of the first occurrence of the value, or error if not found`
	}

	{
		equal { position? "...xo..." "xo" } 4
		equal { position? "xo..." "xo" } 1
		equal { position? { "xo" ".." } "xo" } 1
		equal { position? { ".." "xo" ".." } "xo" } 2
	}

	group "encode-to\\base64" 
	"Encodes a string or binary data as a base64 string."
	{
		arg `data: String or native bytes/pem-block to encode`
		returns `base64-encoded string`
	}

	{
		equal { encode-to\base64 "abcd" } "YWJjZA=="
		equal { encode-to\base64 "hello world" } "aGVsbG8gd29ybGQ="
	}

	group "decode\\base64" 
	"Decodes a base64-encoded string back to its original form."
	{
		arg `string: Base64-encoded string to decode`
		returns `decoded string`
	}

	{
		equal { decode\base64 encode-to\base64 "abcd" } "abcd"
		equal { decode\base64 "aGVsbG8gd29ybGQ=" } "hello world"
	}

	group "space" 
	"Appends a space character to the end of a string."
	{
		arg `string: String to append a space to`
		returns `a new string with a space character appended`
	}

	{
		equal { "abcd" .space } "abcd "
		equal { "" .space } " "
	}

	group "capitalize" 
	"Converts the first character of a string to uppercase, leaving the rest unchanged."
	{
		arg `string: String to capitalize`
		returns `a new string with the first character converted to uppercase`
	}

	{
		equal { capitalize "abcde" } "Abcde"
		equal { capitalize "hello world" } "Hello World"
		equal { capitalize "HELLO" } "Hello"
	}

	group "to-lower" 
	"Converts all characters in a string to lowercase."
	{
		arg `string: String to convert`
		returns `a new string with all characters converted to lowercase`
	}

	{
		equal { to-lower "ABCDE" } "abcde"
		equal { to-lower "Hello World" } "hello world"
		equal { to-lower "123ABC" } "123abc"
	}

	group "to-upper" 
	"Converts all characters in a string to uppercase."
	{
		arg `string: String to convert`
		returns `a new string with all characters converted to uppercase`
	}

	{
		equal { to-upper "abcde" } "ABCDE"
		equal { to-upper "Hello World" } "HELLO WORLD"
		equal { to-upper "123abc" } "123ABC"
	}

	group "concat3" 
	"Concatenates three strings together into a single string."
	{
		arg `string1: First string`
		arg `string2: Second string`
		arg `string3: Third string`
		returns `a new string containing all three strings concatenated together`
	}

	{
		equal { concat3 "aa" "BB" "cc" } "aaBBcc"
		equal { concat3 "hello" " " "world" } "hello world"
	}

	group "join" 
	"Concatenates all strings or numbers in a block or list into a single string with no separator."
	{
		arg `collection: Block or list of strings or numbers to join`
		returns `a single string with all values concatenated together`
	}

	{
		equal { join { "Mary" "Anne" } } "MaryAnne"
		equal { join { "Spot" "Fido" "Rex" } } "SpotFidoRex"
		equal { join { 1 2 3 } } "123"
	}

	group "join\\with" 
	"Concatenates all strings or numbers in a block or list into a single string with a specified delimiter between values."
	{
		arg `collection: Block or list of strings or numbers to join`
		arg `delimiter: String to insert between each value`
		returns `a single string with all values concatenated with the delimiter between them`
	}

	{
		equal { join\with { "Mary" "Anne" } " " } "Mary Anne"
		equal { join\with { "Spot" "Fido" "Rex" } "/" } "Spot/Fido/Rex"
		equal { join\with { 1 2 3 } "-" } "1-2-3"
	}

	group "split" 
	"Splits a string into a block of strings using a separator string."
	{
		arg `string: String to split`
		arg `separator: String that separates values`
		returns `a block of strings resulting from splitting the input string`
	}

	{
		equal { split "a,b,c" "," } { "a" "b" "c" }
		equal { split "hello world" " " } { "hello" "world" }
		equal { split "one::two::three" "::" } { "one" "two" "three" }
	}

	group "split\\quoted" 
	"Splits a string into a block of strings using a separator, while respecting quoted sections that should remain intact."
	{
		arg `string: String to split`
		arg `separator: String that separates values`
		arg `quote: String that marks quoted sections that should not be split`
		returns `a block of strings resulting from splitting the input string, preserving quoted sections`
	}

	{
		equal { split\quoted "`a,b`,c,d" "," "`" } { "`a,b`" "c" "d" }
		equal { split\quoted "'hello, world',foo,bar" "," "'" } { "'hello, world'" "foo" "bar" }
	}

	group "split\\many" 
	"Splits a string into a block of strings using any character in the separators string as a delimiter."
	{
		arg `string: String to split`
		arg `separators: String containing all characters that should be treated as separators`
		returns `a block of strings resulting from splitting the input string at any of the separator characters`
	}

	{
		equal { split\many "192.0.0.1" "." } { "192" "0" "0" "1" }
		equal { split\many "abcd..e.q|bar" ".|" } { "abcd" "e" "q" "bar" }
		equal { split\many "a;b,c:d" ";,:" } { "a" "b" "c" "d" }
	}

	group "split\\every" 
	"Splits a string or block into chunks of the specified size, with any remaining elements in the last chunk."
	{
		arg `collection: String or block to split`
		arg `size: Number of elements in each chunk`
		returns `a block of strings or blocks, each containing at most 'size' elements`
	}

	{
		equal { split\every "abcdefg" 3 } { "abc" "def" "g" }
		equal { split\every "abcdefg" 2 } { "ab" "cd" "ef" "g" }
		equal { split\every "abcdef" 2 } { "ab" "cd" "ef" }
		equal { split\every { 1 2 3 4 5 } 2 } { { 1 2 } { 3 4 } { 5 } }
	}

}

section "Collections " "" {
	group "random" 
	"Selects a random value from a block of values."
	{
		arg `block: Block of values to select from`
		returns `a randomly selected value from the block`
	}

	{
		equal { random { 1 2 3 } |type? } 'integer
		equal { random { 1 2 3 } |contains* { 1 2 3 } } true
	}

	group "unpack" 
	"Flattens a block of blocks or list of lists by one level, combining all inner collections into a single collection."
	{
		arg `collection: Block or list of blocks/lists to unpack`
		returns `a flattened block or list with all inner blocks/lists unpacked`
	}

	{
		equal { unpack { { 123 } { 234 } } } { 123 234 }
		equal { unpack { { { 123 } } { 234 } } } { { 123 } 234 }
		; equal { unpack list { list { 1 2 } list { 3 4 } } } list { 1 2 3 4 }
	}

	group "sample" 
	"Randomly selects a specified number of elements from a collection without replacement."
	{
		arg `collection: Block, list or table to sample from`
		arg `count: Number of random elements to select`
		returns `a new collection with randomly selected elements`
	}

	{
		equal { sample { 1 2 3 4 } 2 |length? } 2
		equal { sample { 123 123 123 123 } 3 -> 0 } 123
		; equal { sample list { 1 2 3 4 5 } 3 |length? } 3
	}

	group "max" 
	"Finds the maximum value in a block or list of comparable values."
	{
		arg `collection: Block or list of comparable values`
		returns `the maximum value in the collection`
	}

	{
		equal { max { 8 2 10 6 } } 10
		equal { max list { 8 2 10 6 } } 10
		equal { try { max { } } |type? } 'error
		equal { try { max list { } } |type? } 'error
	}

	group "min" 
	"Finds the minimum value in a block or list of comparable values."
	{
		arg `collection: Block or list of comparable values`
		returns `the minimum value in the collection`
	}

	{
		equal { min { 8 2 10 6 } } 2
		equal { min list { 8 2 10 6 } } 2
		equal { try { min { } } |type? } 'error
		equal { try { min list { } } |type? } 'error
	}

	group "avg" 
	"Calculates the arithmetic mean (average) of numeric values in a collection."
	{
		arg `collection: Block, list or vector of numeric values`
		returns `the arithmetic mean (average) of the values as a decimal`
	}

	{
		equal { avg { 8 2 10 6 } } 6.5
		equal { avg list { 8 2 10 6 } } 6.5
		equal { avg { 1 2 3 } } 2.0
		equal { try { avg { } } |type? } 'error
		equal { try { avg list { } } |type? } 'error
	}

	group "sum" 
	"Calculates the sum of all numeric values in a collection."
	{
		arg `collection: Block, list or vector of numeric values`
		returns `the sum of all values (integer if all values are integers, decimal otherwise)`
	}

	{
		equal { sum { 8 2 10 6 } } 26
		equal { sum { 8 2 10 6.5 } } 26.5
		equal { sum { } } 0
		equal { sum list { 8 2 10 6 } } 26
		equal { sum list { 8 2 10 6.5 } } 26.5
		equal { sum list { } } 0
	}

	group "mul" 
	"Calculates the product of all numeric values in a collection."
	{
		arg `collection: Block, list or vector of numeric values`
		returns `the product of all values (integer if all values are integers, decimal otherwise)`
	}

	{
		equal { mul { 1 2 3 4 5 } } 120
		equal { mul { 1 2.0 3.3 4 5 } } 132.0
		equal { mul { 2 3 4 } } 24
	}

	group "first" 
	"Retrieves the first item from a collection (block, list, string, or table)."
	{
		arg `collection: Block, list, string or table to get the first item from`
		returns `the first item in the collection`
	}

	{
		equal { first { 1 2 3 4 } } 1
		equal { first "abcde" } "a"
		equal { first list { 1 2 3 } } 1
		; equal { first table { 'a 'b } { 1 2 } { 3 4 } } table-row { 'a 1 'b 2 }
	}

	group "rest" 
	"Creates a new collection with all items except the first one from the input collection."
	{
		arg `collection: Block, list or string to get all but the first item from`
		returns `a new collection containing all items except the first one`
	}

	{
		equal { rest { 1 2 3 4 } } { 2 3 4 }
		equal { rest "abcde" } "bcde"
		equal { rest list { 1 2 3 } } list { 2 3 }
		equal { rest { 1 } } { }
	}

	group "rest\\from" 
	"Creates a new collection with all items starting from the specified position in the input collection."
	{
		arg `collection: Block, list or string to get items from`
		arg `n: Integer position to start from (0-based)`
		returns `a new collection containing all items starting from position n`
	}

	{
		equal { rest\from { 1 2 3 4 5 6 } 3 } { 4 5 6 }
		equal { rest\from "abcdefg" 1 } "bcdefg"
		equal { rest\from list { 1 2 3 4 } 2 } list { 3 4 }
		equal { rest\from { 1 2 3 } 0 } { 1 2 3 }
	}

	group "tail" 
	"Creates a new collection with the last n items from the input collection."
	{
		arg `collection: Block, list, string or table to get the last items from`
		arg `n: Number of items to retrieve from the end`
		returns `a new collection containing the last n items`
	}

	{
		equal { tail { 1 2 3 4 5 6 7 } 3 } { 5 6 7 }
		equal { tail "abcdefg" 4 } "defg"
		equal { tail list { 1 2 3 4 } 1 } list { 4 }
		equal { tail { 1 2 } 5 } { 1 2 }
	}

	group "second" 
	"Retrieves the second item from a collection (block, list, or string)."
	{
		arg `collection: Block, list or string to get the second item from`
		returns `the second item in the collection`
	}

	{
		equal { second { 123 234 345 } } 234
		equal { second "abc" } "b"
		equal { second list { 10 20 30 } } 20
	}

	group "third" 
	"Retrieves the third item from a collection (block, list, or string)."
	{
		arg `collection: Block, list or string to get the third item from`
		returns `the third item in the collection`
	}

	{
		equal { third { 123 234 345 } } 345
		equal { third "abcde" } "c"
		equal { third list { 10 20 30 40 } } 30
	}

	group "last" 
	"Retrieves the last item from a collection (block, list, or string)."
	{
		arg `collection: Block, list or string to get the last item from`
		returns `the last item in the collection`
	}

	{
		equal { last { 1 2 } } 2
		equal { last "abcd" } "d"
		equal { last list { 4 5 6 } } 6
		equal { try { last { } } |type? } 'error
	}

	group "head" 
	"Creates a new collection with the first n items from the input collection, or all but the last |n| items if n is negative."
	{
		arg `collection: Block, list, string or table to get the first items from`
		arg `n: Number of items to retrieve (if positive) or number to exclude from the end (if negative)`
		returns `a new collection containing the first n items or all but the last |n| items`
	}

	{
		equal { head { 4 5 6 7 } 3 } { 4 5 6 }
		equal { head "abcdefg" 2 } "ab"
		equal { head "abcdefg" 4 } "abcd"
		equal { head list { 10 20 30 40 } 2 } list { 10 20 }
		equal { head { 4 5 6 7 } -2 } { 4 5 }
		equal { head "abcdefg" -1 } "abcdef"
		equal { head "abcdefg" -5 } "ab"
		equal { head list { 10 20 30 40 } -1 } list { 10 20 30 }
	}

	group "nth" 
	"Retrieves the item at the specified position (1-based indexing) from a collection."
	{
		arg `collection: Block, list, string or table to get an item from`
		arg `n: Position of the item to retrieve (1-based)`
		returns `the item at position n in the collection`
	}

	{
		equal { nth { 1 2 3 4 5 } 4 } 4
		equal { nth { "a" "b" "c" "d" "e" } 2 } "b"
		equal { nth "abcde" 3 } "c"
		equal { nth list { 10 20 30 40 } 2 } 20
		; equal { nth table { 'a 'b } { 1 2 } { 3 4 } 2 } table-row { 'a 3 'b 4 }
	}

	group "values" 
	"Extracts all values from a dictionary and returns them as a list."
	{
		arg `dict: Dictionary object to extract values from`
		returns `list containing all values from the dictionary`
	}

	{
		equal { dict { "a" 1 "b" 2 "c" 3 } |values } list { 1 2 3 }
		equal { dict { "x" 10 "y" 20 } |values |length? } 2
	}

	group "sort" 
	"Creates a new collection with items sorted in ascending order."
	{
		arg `collection: Block, list or string to sort`
		returns `a new collection with items sorted in ascending order`
	}

	{
		equal { sort { 6 12 1 } } { 1 6 12 }
		equal { sort x: { 6 12 1 } x } { 6 12 1 }
		equal { sort { "b" "c" "a" } } { "a" "b" "c" }
		equal { sort list { 5 3 1 4 } } list { 1 3 4 5 }
		equal { sort "cba" } "abc"
	}

	group "sort!" 
	"Sorts a block or list in-place in ascending order and returns the modified collection."
	{
		arg `collection: Reference to a block or list to sort in-place`
		returns `the sorted collection (same reference, modified in-place)`
	}

	{
		error { x: { 6 12 1 } , sort! x }
		equal { x: ref { 6 12 1 } , sort! x , x } { 1 6 12 }
		equal { x: ref list { 5 3 1 4 } , sort! x , x } list { 1 3 4 5 }
	}

	group "sort\\by" 
	"Creates a new collection with items sorted according to a custom comparison function."
	{
		arg `collection: Block or list to sort`
		arg `comparator: Function that takes two arguments and returns a truthy value if they are in the correct order`
		returns `a new collection with items sorted according to the comparator function`
	}

	{
		equal { sort\by { 6 12 1 } fn { a b } { a < b } } { 1 6 12 }
		equal { sort\by { 6 12 1 } fn { a b } { a > b } } { 12 6 1 }
		equal { sort\by { { x 6 } { x 12 } { x 1 } } fn { a b } { second a |< second b } } { { x 1 } { x 6 } { x 12 } }
		equal { sort\by list { 5 3 1 4 } fn { a b } { a > b } } list { 5 4 3 1 }
	}

	group "unique" 
	"Creates a new collection with duplicate values removed, keeping only the first occurrence of each value."
	{
		arg `collection: Block, list or string to remove duplicates from`
		returns `a new collection with duplicate values removed`
	}

	{
		equal { list { 3 2 3 5 3 2 } .unique |sort } list { 2 3 5 }
		equal { unique list { 1 1 2 2 3 } |sort } list { 1 2 3 }
		equal { unique list { 1 1 2 2 } |sort } list { 1 2 }
		equal { unique { 1 1 2 2 3 } |sort } { 1 2 3 }
		equal { unique { 1 1 2 2 } |sort } { 1 2 }
		equal { unique "aabbc" |length? } 3
		equal { unique "ab" |length? } 2
	}

	group "reverse" 
	"Creates a new collection with items in reverse order from the input collection."
	{
		arg `collection: Block, list or string to reverse`
		returns `a new collection with items in reverse order`
	}

	{
		equal { reverse { 3 1 2 3 } } { 3 2 1 3 }
		equal { reverse "abcd" } "dcba"
		equal { reverse list { 1 2 3 4 } } list { 4 3 2 1 }
		equal { reverse { } } { }
	}

	group "reverse!" 
	"Reverses a block or list in-place and returns the modified collection."
	{
		arg `collection: Reference to a block or list to reverse in-place`
		returns `the reversed collection (same reference, modified in-place)`
	}

	{
		error { reverse! { 3 1 2 3 } }
		equal { reverse! ref { 3 1 2 3 } } { 3 2 1 3 }
		equal { x: ref list { 1 2 3 } , reverse! x , x } list { 3 2 1 }
	}

	group "concat" 
	"Joins two series values together."
	{
		arg `value1: First value (string, integer, block) to concatenate`
		arg `value2: Second value to concatenate with the first`
		returns `result of concatenating the two values`
	}

	{
		equal { "abcd" .concat "cde" } "abcdcde"
		equal { concat { 1 2 3 4 } { 2 4 5 } } { 1 2 3 4 2 4 5 }
		equal { 123 .concat "abc" } "123abc"
	}

	group "_++" 
	"Joins two values together, with behavior depending on types: concatenates strings, joins blocks, merges dictionaries, etc."
	{
		arg `value1: First value (string, block, dict, etc.)`
		arg `value2: Second value to join`
		returns `result of joining the values, type depends on input types`
	}

	{
		equal { "A" ++ "b" } "Ab"
		equal { "A" ++ 1 } "A1"
		equal { { 1 2 } ++ { 3 4 } } { 1 2 3 4 }
		equal { dict { "a" 1 } | ++ { "b" 2 } } dict { "a" 1 "b" 2 }
		equal { dict { "a" 1 } | ++ dict { "b" 2 } } dict { "a" 1 "b" 2 }
	}

	group "union" 
	"Combines two collections, removing any duplicate values to create a union of all unique values."
	{
		arg `collection1: First block or list`
		arg `collection2: Second block or list`
		returns `a new collection containing all unique values from both collections`
	}

	{
		; equal { "abcd" .union "cde" } "abcde"
		equal { union { 1 2 3 4 } { 2 4 5 } |length? } 5 ; order is not certain
		equal { union list { 1 2 3 4 } list { 2 4 5 } |length? } 5 ; order is not certain
		equal { union { 8 2 } { 1 9 } |sort } { 1 2 8 9 }
		equal { union { 1 2 } { } |sort } { 1 2 }
		equal { union { } { 1 9 } |sort }  { 1 9 }
		equal { union { } { } } { }
		equal { union list { 1 2 } list { 1 2 3 4 } |sort } list { 1 2 3 4 }
		equal { union list { 1 2 } list { 1 } |sort } list { 1 2 }
		equal { union list { 1 2 } list { } |sort } list { 1 2 }
		equal { union list { } list { 1 2 } |sort } list { 1 2 }
		equal { union list { } list { } } list { }
	}

	group "range" 
	"Creates a block containing all integers from the start value to the end value, inclusive."
	{
		arg `start: Integer starting value (inclusive)`
		arg `end: Integer ending value (inclusive)`
		returns `a block containing all integers from start to end, inclusive`
	}

	{
		equal { range 1 5 } { 1 2 3 4 5 }
		equal { range 5 10 } { 5 6 7 8 9 10 }
		equal { range -2 2 } { -2 -1 0 1 2 }
	}

	group "is-empty" 
	"Checks if a collection is empty, returning 1 for empty collections and 0 otherwise."
	{
		arg `collection: String, block, dict, list, table, context or vector to check`
		returns `integer 1 if the collection is empty, 0 otherwise`
	}

	{
		equal { { } .is-empty } true
		equal { dict { } |is-empty } true
		equal { table { 'a 'b } { } |is-empty } true
		equal { "abc" .is-empty } false
		equal { { 1 2 3 } .is-empty } false
	}

	group "length?" 
	"Returns the number of elements in a collection."
	{
		arg `collection: String, block, dict, list, table, context or vector to measure`
		returns `integer count of elements in the collection`
	}

	{
		equal { { 1 2 3 } .length? } 3
		equal { length? "abcd" } 4
		equal { table { 'val } { 1 2 3 4 } |length? } 4
		equal { vector { 10 20 30 } |length? } 3
		equal { dict { "a" 1 "b" 2 } |length? } 2
	}

	group "keys" 
	"Extracts the keys from a dictionary or column names from a table as a block."
	{
		arg `collection: Dict or table to extract keys from`
		returns `block containing all keys from the dictionary or column names from the table`
	}

	{
		equal { dict { "a" 1 "b" 2 "c" 3 } |keys |length? } 3
		equal { table { "a" "b" "c" } { 1 2 3 } |keys |length? } 3
		; TODO -- doesn't work yet, .header? also has the same problem -- equal { table { 'a 'b 'c } { 1 2 3 } |keys } { 'a 'b 'c }
	}

	group "_->" 
	"Accesses a value in a collection by index or key (1-based indexing for blocks and lists)."
	{
		arg `collection: Block, list, dict or other indexable collection`
		arg `index: Index or key to access`
		returns `value at the specified index or key`
	}

	{
		equal { { 23 34 45 } -> 1 } 34
		equal { { "a" "b" "c" } -> 0 } "a"
		equal { dict { "a" 1 "b" 2 } -> "b" } 2
	}

	group "_<-" 
	"Accesses a value in a collection by index or key, with reversed argument order (0-based indexing for blocks and lists)."
	{
		arg `index: Index or key to access`
		arg `collection: Block, list, dict or other indexable collection`
		returns `value at the specified index or key`
	}

	{
		equal { 0 <- { 23 34 45 } } 23
		equal { 2 <- { "a" "b" "c" } } "c"
		equal { "a" <- dict { "a" 1 "b" 2 } } 1
	}

	group "_<~" 
	"Accesses a value in a collection by index with reversed argument order (1-based indexing)."
	{
		arg `index: Index to access (1-based)`
		arg `collection: Block, list or other indexable collection`
		returns `value at the specified index`
	}

	{
		equal { 2 <~ { 23 34 45 } } 34
		equal { 1 <~ { "a" "b" "c" } } "a"
	}

	group "_~>" 
	"Accesses a value in a collection by index (0-based indexing)."
	{
		arg `collection: Block, list or other indexable collection`
		arg `index: Index to access (0-based)`
		returns `value at the specified index`
	}

	{
		equal { { 23 34 45 } ~> 1 } 23
		equal { { "a" "b" "c" } ~> 1 } "a"
	}

	group "intersection" 
	"Finds the common elements between two collections, returning only values that appear in both."
	{
		arg `collection1: First string, block or list`
		arg `collection2: Second string, block or list (same type as first)`
		returns `a new collection containing only values that appear in both input collections`
	}

	{
		equal { "abcd" .intersection "cde" } "cd"
		equal { intersection { 1 2 3 4 } { 2 4 5 } } { 2 4 }
		equal { intersection { 1 3 5 6 } { 2 3 4 5 } } { 3 5 }
		equal { intersection { 1 2 3 } { } } {  }
		equal { intersection { } { 2 3 4  } } { }
		equal { intersection { 1 2 3 } { 4 5 6 } } { }
		equal { intersection { } { } } { }
		equal { intersection list { 1 3 5 6 } list { 2 3 4 5 } } list { 3 5 }
		equal { intersection list { 1 2 3 } list { } } list {  }
		equal { intersection list { } list { 2 3 4 } } list { }
		equal { intersection list { 1 2 3 } list { 4 5 6 } } list { }
		equal { intersection list { } list { } } list { }
	}

	group "intersection\\by" 
	"Finds the intersection of two collections using a custom comparison function to determine matching elements."
	{
		arg `collection1: First string or block`
		arg `collection2: Second string or block`
		arg `comparator: Function that takes two arguments and returns a truthy value if they should be considered matching`
		returns `a new collection containing values from the first collection that match with values from the second collection according to the comparator`
	}

	{
		equal { intersection\by "foobar" "fbx" fn { a b } { a .contains b } } "fb"
		equal { intersection\by "fooBar" "Fbx" fn { a b } { a .to-lower .contains to-lower b } } "fB"
		equal { intersection\by { "foo" 33 } { 33 33 } fn { a b } { a .contains b } } { 33 }
		equal { intersection\by { "foo" "bar" 33 } { 42 } fn { a b } { map a { .type? } |contains b .type? } } { 33 }
		equal { intersection\by { { "foo" x } { "bar" y } } { { "bar" z } } fn { a b } { map a { .first } |contains first b } } { { "bar" y } }
	}

	group "difference" 
	"Creates a new collection containing elements from the first collection that are not present in the second collection."
	{
		arg `collection1: First string, block or list`
		arg `collection2: Second string, block or list (same type as first)`
		returns `a new collection containing values from the first collection that do not appear in the second collection`
	}

	{
		equal { "abcde" .difference "cde" } "ab"
		equal { difference { 1 2 3 4 } { 2 4 } } { 1 3 }
		equal { difference list { "Bob" "Sal" "Joe" } list { "Joe" } } list { "Bob" "Sal" }
		equal { difference "abc" "bc" } "a"
		equal { difference "abc" "abc" } ""
		equal { difference "abc" "" } "abc"
		equal { difference "" "" } ""
		equal { difference { 1 3 5 6 } { 2 3 4 5 } } { 1 6 }
		equal { difference { 1 2 3 } {  } } { 1 2 3 }
		equal { difference { } { 2 3 4  } } { }
		equal { difference { } { } } { }
		equal { difference list { 1 3 5 6 } list { 2 3 4 5 } } list { 1 6 }
		equal { difference list { 1 2 3 } list {  } } list { 1 2 3 }
		equal { difference list { } list { 2 3 4 } } list { }
		equal { difference list { } list { } } list { }
	}

	group "transpose" 
	"Transposes a matrix (block of blocks), converting rows to columns and columns to rows."
	{
		arg `matrix: Block of blocks representing a matrix`
		returns `transposed matrix (rows become columns and columns become rows)`
	}

	{
		equal { { { 1 2 3 } { 4 5 6 } } .transpose } { { 1 4 } { 2 5 } { 3 6 } }
		equal { { { 1 4 } { 2 5 } { 3 6 } } .transpose } { { 1 2 3 } { 4 5 6 } }
	}

	group "remove-last!" 
	"Removes the last element from a block in-place and returns the modified block."
	{
		arg `word: Word referring to a block to modify`
		returns `the modified block with the last element removed`
	}

	{
		equal { var 'x ref { 1 2 3 4 } remove-last! 'x x } { 1 2 3 }
		equal { var 'x ref { 1 2 3 4 } remove-last! 'x } { 1 2 3 }
	}

	group "append!" 
	"Appends a value to a block, list or string in-place and returns the modified collection."
	{
		arg `value: Value to append`
		arg `word: Word referring to a block, list or string to modify`
		returns `the modified collection with the value appended`
	}

	{
		; TODO equal { x: ref { 1 2 3 } append! { 4 } x , x } { 1 2 3 4 }
		equal { var 'x ref { 1 2 3 } append! 4 'x , x } { 1 2 3 4 }
		equal { var 's "hello" append! " world" 's , s } "hello world"
	}

	group "change\\nth!" 
	"Changes the value at a specific position in a block or list in-place and returns the modified collection."
	{
		arg `collection: Reference to a block or list to modify`
		arg `position: Position of the element to change (1-based)`
		arg `value: New value to set at the specified position`
		returns `the modified collection with the value changed at the specified position`
	}

	{
		equal { x: ref { 1 2 3 } change\nth! x 2 222 , x } { 1 222 3 }
		equal { x: ref list { "a" "b" "c" } change\nth! x 1 "X" , x } list { "X" "b" "c" }
	}

	group "peek" 
	"Returns the current value at a block's cursor position without advancing the cursor."
	{
		arg `block: Block to peek at`
		returns `the current value at the block's cursor position without advancing the cursor`
	}

	{
		equal { x: { 1 2 3 } peek x } 1
	}

	group "pop" 
	"Returns the current value at a block's cursor position and advances the cursor."
	{
		arg `block: Block to pop from`
		returns `the current value at the block's cursor position, advancing the cursor`
	}

	{
		equal { x: { 1 2 3 } pop x } 1
	}

	group "pos" 
	"Returns the current cursor position in a block."
	{
		arg `block: Block to get position from`
		returns `the current cursor position in the block`
	}

	{
		equal { x: { 1 2 3 } pos x } 0
		equal { x: { 1 2 3 } pos next x } 1
	}

	group "next" 
	"Advances the cursor position in a block and returns the block."
	{
		arg `block: Block to advance cursor in`
		returns `the block with its cursor advanced to the next position`
	}

	{
		equal { x: { 11 22 33 } peek next next x } 33
	}

	group "vals" 
	"Takes a block of Rye values and evaluates each value or expression."
	{
	}

	{
		equal { x: 1 y: 2 vals { x y } } { 1 2 }
		equal { x: 1 y: 2 vals { 1 y } } { 1 2 }
		equal { x: 1 y: 2 try { vals { z y } } |type? } 'error
	}

	group "vals\\with" 
	"Evaluate a block with injecting the first argument."
	{
	}

	{
		equal { x: 1 y: 2 vals\with 10 { + x , * y } } { 11 20 }
		equal { x: 1 y: 2 vals\with 100 { + 10 , * 8.9 } } { 110 890.0 }
	}

}

section "Contexts " "Context related functions" {
	group "raw-context" 
	"Creates a completely isolated context with no parent, where only built-in functions are available."
	{
		arg `block: Block of expressions to evaluate in a new isolated context`
		returns `context object with the values defined in the block`
	}

	{
		equal { c: raw-context { x: 123 } c/x } 123
		equal { y: 123 try { c: raw-context { x: y } } |type? } 'error ; word not found y
		equal { try { c: raw-context { x: inc 10 } } |type? } 'error ; word not found inc
	}

	group "isolate" 
	"Creates a context that can access the parent context during creation, but becomes isolated afterward."
	{
		arg `block: Block of expressions to evaluate in a temporary context`
		returns `context object with the values defined in the block, but isolated from parent contexts`
	}

	{
		equal { c: isolate { x: 123 } c/x } 123
		equal { y: 123 c: isolate { x: y } c/x } 123
		equal { c: isolate { x: inc 10 } c/x } 11
		; equal { y: 99 c: isolate { x: does { y } } try { c/x } |type? } 'error
		; equal { y: 99 c: isolate { t: ?try x: does { t { y } } } c/x |type? } 'error
	}

	group "context" 
	"Creates a new context that maintains access to its parent context."
	{
		arg `block: Block of expressions to evaluate in a new context`
		returns `context object with the values defined in the block and access to parent context`
	}

	{
		equal { c: context { x: 123 } c/x } 123
		equal { y: 123 c: context { x: y } c/x } 123
		equal { c: context { x: inc 10 } c/x } 11
		equal { y: 123 c: context { x: does { y } } c/x } 123
	}

	group "private" 
	"Creates a temporary private context for evaluating expressions, returning the last value instead of the context."
	{
		arg `block: Block of expressions to evaluate in a private context`
		returns `the last value from evaluating the block (not the context itself)`
	}

	{
		equal { private { x: 123 } } 123
		equal { y: 123 private { x: y } } 123
		equal { private { x: inc 10 } } 11
		equal { y: 123 private { does { y } } :f f } 123
	}

	group "private\\" 
	"Creates a documented private context for evaluating expressions, returning the last value instead of the context."
	{
		arg `doc: String containing documentation for the context`
		arg `block: Block of expressions to evaluate in a private context`
		returns `the last value from evaluating the block (not the context itself)`
	}

	{
		equal { private\ "what are we doing here" { x: 234 1000 + x } } 1234
	}

	group "extends" 
	"Creates a new context that inherits from a specified parent context."
	{
		arg `parent: Context object to extend`
		arg `block: Block of expressions to evaluate in the new context`
		returns `new context object that inherits from the parent context`
	}

	{
		equal { ct: context { p: 123 } cn: extends ct { r: p + 234 } cn/r } 357
		; error { ct: context { p: 123 } cn: extends ct { r: p + 234 } cn/r }
	}

	group "bind!" 
	"Binds a context to a parent context, allowing it to access the parent's values."
	{
		arg `child: Context object to be bound`
		arg `parent: Context object to bind to as parent`
		returns `the modified child context with its parent set to the specified parent context`
	}

	{
		equal { c: context { y: 123 } cc: bind! context { z: does { y + 234 } } c , cc/z } 357
	}

	group "unbind" 
	"Removes the parent relationship from a context, making it a standalone context."
	{
		arg `ctx: Context object to unbind from its parent`
		returns `the modified context with no parent`
	}

	{
		equal { c: context { y: 123 } cc: bind! context { z: does { y + 234 } } c , unbind cc cc/z } 357
		; error { c: context { y: 123 } cc: bind! context { z: does { y + 234 } } c , dd: unbind cc dd/z }
	}

	group "current" 
	"Returns current context."
	{
	}

	{
		equal { c: context { var 'x 9999 , incr: fn\in { } current { x:: inc x } } c/incr c/x } 10000
	}

	group "parent" 
	"Returns parent context of the current context."
	{
	}

	{
		equal { var 'y 99 c: context { incr: fn\in { } parent { y:: inc y } } c/incr y } 100
	}

	group "parent\\of" 
	"Returns parent context of the current context."
	{
	}

	{
		equal { ct: context { p: 123 } parent\of ct |= current } true
	}

	group "clone" 
	"Creates a copy of a context with the same state and parent relationship."
	{
		arg `ctx: Context object to clone`
		returns `a new context object that is a copy of the original context`
	}

	{
		equal { c: context { x: 123 y: 456 } cc: clone c cc/x } 123
		equal { c: context { x: 123 y: 456 } cc: clone c cc/y } 456
		equal { c: context { x:: 123 } cc: clone c do\in cc { x:: 999 } c/x  } 123 ; original unchanged
		equal { c: context { x:: 123 } cc: clone c do\in cc { x:: 999 } cc/x } 999 ; clone modified
	}

	group "clone\\" 
	"Creates a copy of a context and evaluates a block of code inside the clone."
	{
		arg `ctx: Context object to clone`
		arg `block: Block of expressions to evaluate in the cloned context`
		returns `the cloned context with the block evaluated inside it`
	}

	{
		equal { c: context { x: 123 } cc: clone\ c { y: x + 100 } cc/y } 223
		; equal { c: context { x:: 123 } cc: clone\ c { y: x + 100 } c/y } 'error ; y not in original context
		; equal { c: context { x:: 123 } cc: clone\ c { x: 999 } c/x } 123 ; original unchanged
		; equal { c: context { x:: 123 } cc: clone\ c { x: 999 } cc/x } 999 ; clone modified
	}

}

section "Functions " "functions that create functions" {
	group "var" 
	"Declares a word as a variable with the given value, allowing it to be modified. Can only be used once per word in a context."
	{
		arg `word: Tagword representing the variable name`
		arg `value: Initial value for the variable`
		returns `The initial value`
	}

	{
		equal { var 'x 10 x:: 20 x } 20
	}

	group "does" 
	"Creates a function with no arguments that executes the given block when called."
	{
		arg `body: Block containing the function body code`
		returns `function object with no parameters`
	}

	{
		equal { does { 123 } |type? } 'function
		equal { x: does { 123 } x } 123
		equal { x: does { 1 + 2 } x } 3
	}

	group "fn1" 
	"Creates a function that accepts one anonymous argument and executes the given block with that argument."
	{
		arg `body: Block containing the function body code`
		returns `function object that accepts one anonymous argument`
	}

	{
		equal { fn1 { .pass { } } |type? } 'function
		equal { x: fn1 { } , x 123 } 123
		equal { x: fn1 { .pass { } } , x 123 } 123
		equal { x: fn1 { + 1 } , x 123 } 124
	}

	group "fn" 
	"Creates a function with named parameters specified in the first block and code in the second block."
	{
		arg `spec: Block containing parameter specifications`
		arg `body: Block containing the function body code`
		returns `function object with the specified parameters`
	}

	{
		equal { fn { } { } |type? } 'function
		equal { x: fn { } { 234 } , x } 234
		equal { x: fn { x } { x } , x 123 } 123
		equal { x: fn { x } { + 123 } , x 123 } 246
	}

	group "pfn" 
	"Creates a pure function (no side effects allowed) with named parameters and code body."
	{
		arg `spec: Block containing parameter specifications`
		arg `body: Block containing the function body code`
		returns `pure function object with the specified parameters`
	}

	{
		equal { pfn { } { } |type? } 'function
		equal { x: pfn { x } { + 123 } , x 123 } 246
		; TODO -- it seems pure namespace not also has print and append! error { x: pfn { } { ?append! } , x 123 }
		; TODO -- it seems pure namespace not also has print and append! error { x: pfn { x } { .print } , x 123 }
	}

	group "fn\\cc" 
	"Creates a function that captures the current context, allowing access to variables from the enclosing scope."
	{
		arg `spec: Block containing parameter specifications`
		arg `body: Block containing the function body code`
		returns `function object with the current context captured`
	}

	{
		equal { fn\cc { x } { x + y } |type? } 'function
		equal { y: 5 , f: fn\cc { x } { x + y } , f 3 } 8
	}

	group "fn\\par" 
	"Creates a function with a specified parent context, allowing access to variables from that context."
	{
		arg `spec: Block containing parameter specifications`
		arg `context: Context object to use as parent context`
		arg `body: Block containing the function body code`
		returns `function object with the specified parent context`
	}

	{
		equal { ctx: context { y: 5 } , f: fn\par { x } ctx { x + y } , f 3 } 8
	}

	group "fn\\in" 
	"Creates a function that executes directly in the specified context rather than creating a new execution context."
	{
		arg `spec: Block containing parameter specifications`
		arg `context: Context object to execute the function in`
		arg `body: Block containing the function body code`
		returns `function object that executes directly in the specified context`
	}

	{
		equal { ctx: context { y: 5 } , f: fn\in { x } ctx { x + y } , f 3 } 8
	}

	group "closure" 
	"Creates a closure that captures the current context at creation time, preserving access to variables in that scope."
	{
		arg `spec: Block containing parameter specifications`
		arg `body: Block containing the function body code`
		returns `function object that captures the current context at creation time`
	}

	{
		equal { y: 5 , f: closure { x } { x + y } , f 3 } 8
		equal { mk-cntr: does { var 'c 0 , closure { } { inc! 'c } } cnt: mk-cntr , cnt + cnt + cnt } 6
	}

	group "partial" 
	"Creates a partially applied function with specified arguments, using _ (void) for arguments to be filled later."
	{
		arg `func: Function or builtin to partially apply`
		arg `args: Block of arguments, with _ (void) for arguments to be filled later`
		returns `CurriedCaller object that can be called with the remaining arguments`
	}

	{
		equal { prepend-star: partial ?concat [ "* " _ ] , prepend-star "hello" } "* hello"
		equal { add-5: partial ?_+ [ _ 5 ] , add-5 10 } 15
		equal { fn-add: fn { x y } { x + y } , add-5: partial ?fn-add [ _ 5 ] , add-5 10 } 15
	}

}

section "Other " "..." {
	group "change!" 
	"Searches for a word and changes it's value in-place. Only works on variables declared with var. If value changes returns true otherwise false"
	{
		arg `value: New value to assign to the word`
		arg `word: Word whose value should be changed`
		returns `Boolean true if the value changed, false if the new value is the same as the old value`
	}

	{
		equal   { var 'x 123 , change! 234 'x , x } 234
		equal   { a:: 123 change! 333 'a a } 333
		equal   { a:: 123 change! 124 'a } true
		equal   { a:: 123 change! 123 'a } false
	}

	group "set!" 
	"Set word to value or words by deconstructing a block. Only works on variables declared with var."
	{
		arg `values: Value or block of values to assign to the word(s)`
		arg `words: Word or block of words to be set`
		returns `The value or block of values that was assigned`
	}

	{
		equal   { set! { 123 234 } { a b }  b } 234
	}

	group "unset!" 
	"Unset a word in current context, only meant to be used in console"
	{
		arg `word: Word to be unset from the current context`
		returns `Void value`
	}

	{
		equal   { x: 1 unset! 'x x: 2 } 2 ; otherwise would produce an error
	}

	group "val" 
	"Returns value of the word in context"
	{
		arg `word: Word whose value should be retrieved`
		returns `The value associated with the word in the current context`
	}

	{
		equal   { x: 123 val 'x } 123
		equal   { x: 123 y: 'x val y } 123
	}

	group "_<<" 
	"Converts a value to specific kind (R to L)"
	{
		arg `kind: Kind to convert the value to`
		arg `value: Dict or context to convert`
		returns `A new context of the specified kind`
	}

	{
		; TODO equal   { person: kind 'person { name: "" age: 0 } person << dict { "name" "John" "age" 30 } |type? } 'ctx
	}

	group "_|" 
	"Pipeline operator that passes the value through unchanged (used with 'not' and other operations)."
	{
		arg `value: Any value to be passed through unchanged`
		returns `the original value (used in pipeline operations for explicit pass-through)`
	}

	{
		equal { 5 _| } 5
		equal { "hello" _| } "hello"
		equal { true _| } true
		equal { { 1 2 3 } _| } { 1 2 3 }
	}

	group "save\\current" 
	"Saves current state of the program to a file."
	{
		arg `None`
		returns `Integer 1 on success`
	}

	{
		equal  { save\current |type? } 'integer
	}

	group "save\\current\\secure" 
	"Saves current state of the program to a file with password protection."
	{
		arg `None`
		returns `Integer 1 on success`
	}

	{
		; equal  { save\current\secure |type? } 'integer
	}

	group "doc!" 
	"Sets docstring of the current context."
	{
		arg `doc: String to set as the docstring for the current context`
		returns `Integer 1 on success`
	}

	{
		equal   { x: private { doc! "some doc" doc? } } "some doc"
	}

	group "doc?" 
	"Gets docstring of the current context."
	{
		arg `None`
		returns `String containing the docstring of the current context`
	}

	{
		equal   { x: private { doc! "some doc" doc? } } "some doc"
	}

	group "doc\\of?" 
	"Get docstring of the passed context."
	{
		arg `value: Function, builtin, or context to get the docstring from`
		returns `String containing the docstring of the provided value`
	}

	{
		equal   { x: context { doc! "some doc" } doc\of? x } "some doc"
	}

	group "ref" 
	"Makes a value mutable instead of immutable"
	{
		arg `value: Value to make mutable`
		returns `A mutable reference to the value`
	}

	{
		equal   { is-ref ref { 1 2 3 } } true
	}

	group "deref" 
	"Makes a value again immutable"
	{
		arg `value: Mutable reference to make immutable`
		returns `An immutable copy of the value`
	}

	{
		equal   { is-ref deref ref { 1 2 3 } } false
	}

	group "is-ref" 
	"Checks if a value is a mutable reference."
	{
		arg `value: Any value to check if it's a reference`
		returns `Integer 1 if the value is a reference, 0 otherwise`
	}

	{
		equal  { ref { } |is-ref } true
		equal  { { } |is-ref } false
	}

	group "dict" 
	"Constructs a Dict from the Block of key and value pairs."
	{
		arg `block: Block containing alternating keys and values`
		returns `A new Dict with the specified keys and values`
	}

	{
		equal { dict { "a" 123 } -> "a" } 123
	}

	group "list" 
	"Constructs a List from the Block of values."
	{
		arg `block: Block containing values to put in the list`
		returns `A new List with the values from the block`
	}

	{
		equal { list { "a" 123 } -> 0 } "a"
	}

	group "import" 
	"Imports a file, loads and does it from script local path."
	{
		arg `uri: URI of the file to import and execute`
		returns `result of executing the imported file`
	}

	{
		; import file://test.rye  ; imports and executes test.rye
	}

	group "import\\live" 
	"Imports a file, loads and does it from script local path."
	{
		arg `uri: URI of the file to import, execute, and watch for changes`
		returns `result of executing the imported file`
	}

	{
		; import\live file://test.rye  ; imports, executes, and watches test.rye for changes
	}

	group "load" 
	"Loads a string into Rye values."
	{
		arg `source: String containing Rye code or URI of file to load`
		returns `Block containing the parsed Rye values`
	}

	{
		equal  { load " 1 2 3 " |third } 3
		equal  { load "{ 1 2 3 }" |first |third } 3
	}

	group "load\\mod" 
	"Loads a string into Rye values. During load it allows modification of words."
	{
		arg `source: String containing Rye code or URI of file to load with modification allowed`
		returns `Block containing the parsed Rye values`
	}

	{
		; load\mod file://modifiable.rye  ; loads file with word modification allowed
	}

	group "load\\live" 
	"Loads a string into Rye values. During load it allows modification of words."
	{
		arg `source: String containing Rye code or URI of file to load with modification allowed and file watching`
		returns `Block containing the parsed Rye values`
	}

	{
		; load\live file://watched.rye  ; loads and watches file for changes
	}

	group "load\\sig" 
	"Checks the signature, if OK then loads a string into Rye values."
	{
		arg `source: String containing signed Rye code to verify and load`
		returns `Block containing the parsed Rye values if signature is valid`
	}

	{
		; load\sig "signed-code"  ; loads only if signature is valid
	}

	group "do" 
	"Takes a block of code and does (runs) it."
	{
		arg `block: Block of code to execute`
		returns `result of executing the block`
	}

	{
		equal  { do { 123 + 123 } } 246
		error  { do { 123 + } }
		equal  { do { _+ _+ 12 23 34 } } 69
		equal  { do { 12 * 23 |+ 34 } } 310
		equal  { do { ( 12 * 23 ) + 34 } } 310
		equal  { do { 12 * 23 | + 34 } } 310
		equal  { do { 12 * 23 :a + 34 } } 310
		equal  { do { 12 * 23 :a a + 34 } } 310
	}

	group "with" 
	"Takes a value and a block of code. It does the code with the value injected."
	{
		arg `value: Value to inject into the block's execution context`
		arg `block: Block of code to execute with the injected value`
		returns `result of executing the block with the injected value`
	}

	{
		equal  { with 100 { + 11 } } 111
		equal  { with 100 { + 11 , * 3 } } 300
	}

	group "do\\in" 
	"Takes a Context and a Block. It Does a block inside a given Context."
	{
		arg `context: Context in which to execute the block`
		arg `block: Block of code to execute within the specified context`
		returns `result of executing the block within the given context`
	}

	{
		equal  { c: context { x: 100 } do\in c { x * 9.99 } } 999.0
		equal  { c: context { x:: 100 } do\in c { inc! 'x } } 101
		equal  { c: context { var 'x 100 } do\in c { x:: 200 } c/x } 200
		equal  { c: context { x:: 100 } do\in c { x:: 200 , x } } 200
	}

	group "do\\par" 
	"Takes a Context and a Block. It Does a block in current context but with parent a given Context."
	{
		arg `context: Context to use as parent context during execution`
		arg `block: Block of code to execute in current context with the specified parent context`
		returns `result of executing the block with the modified parent context`
	}

	{
		equal  { c: context { x: 100 } do\par c { x * 9.99 } } 999.0
		equal  { c: context { x:: 100 } do\par c { inc! 'x } } 101
		equal  { c: context { x: 100 } do\par c { x:: 200 , x } } 200
		equal  { c: context { x: 100 } do\par c { x:: 200 } c/x } 100
	}

	group "return" 
	"Accepts one value and returns it."
	{
	}

	{
		equal { x: fn { } { return 101 202 } x } 101
	}

	group "cmd" 
	"Execute a shell command."
	{
	}

	{
		equal { cmd `echo "hello"` } 1
	}

	group "rye" 
	""
	{
	}

	{
		equal { rye .type? } 'native
	}

	group "defer" 
	"Registers a block of code to be executed when the current function exits or the program terminates."
	{
	}

	{
		equal { x:: 123 defer { x:: 345 } x } 123
		stdout { ff:: fn { } { var 'x 123 defer { print 234 } x } , ff } "234\n"
		equal { ff:: fn { } { x:: 123 defer { x:: 234 } x + 111 } , ff } 234 ; the result of defer expression is returned TODO, change this
	}

	group "defer\\" 
	"Registers a block of code with an injected value to be executed when the current function exits or the program terminates. Works like 'with' but deferred."
	{
		arg `value: Value to inject into the deferred block`
		arg `block: Block to execute with the injected value when function exits`
		returns `Void value`
	}

	{
		equal { x:: 0 defer\ 42 { + 1 } x } 0
		stdout { ff:: fn { } { defer\ "hello" { .print } "done" } , ff } "hello\n"
	}

}


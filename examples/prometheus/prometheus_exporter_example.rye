; Prometheus Exporter Example in Ryelang
; This example demonstrates how to create a custom node_exporter for Prometheus
; Similar to the Go example in prometheus_exporter_sample.go

; Import the prometheus module
prometheus: rye .prometheus

; Create a counter for tracking log errors
create-log-error-counter: fn { file } {
    ; Create a new counter with name, help text, and labels
    counter: prometheus/new-counter "log_errors_total" "Total number of errors found in a log file" {
        "log_file" file
    }
    
    ; Return the counter
    counter
}

; Create a mutex for thread safety
create-mutex: fn { } {
    prometheus/new-mutex
}

; Function to monitor a log file and increment counter when errors are found
monitor-log-file: fn { log-file counter mutex } {
    ; In a real implementation, this would use file/tail or similar
    ; For demonstration purposes, we'll simulate finding errors
    
    ; Create a loop that would normally tail the file
    loop 10 { i |
        ; Simulate finding an error in every third line
        if (i % 3 = 0) {
            ; Lock the mutex before updating the counter
            mutex |prometheus-mutex/lock
            
            ; Increment the counter
            counter |prometheus-counter/inc
            
            ; Unlock the mutex
            mutex |prometheus-mutex/unlock
            
            ; Print a message
            print ["Found error in " log-file ", counter now: " i / 3 + 1]
        }
        
        ; Sleep to simulate waiting for new log entries
        sleep 1
    }
}

; Main function
main: fn { } {
    ; Define log files to monitor
    log-files: ["app.log" "system.log" "error.log"]
    
    ; Create a mutex for thread safety
    mutex: create-mutex
    
    ; Create counters for each log file
    counters: map log-files { file |
        counter: create-log-error-counter file
        
        ; Start monitoring the log file in a separate goroutine
        go { monitor-log-file file counter mutex }
        
        ; Return the counter for this file
        counter
    }
    
    ; Start the HTTP server for Prometheus metrics
    prometheus/start-http-server ":8080"
    
    ; Print a message
    print "Prometheus exporter started on :8080"
    print "Visit http://localhost:8080/metrics to see the metrics"
    
    ; Wait indefinitely (in a real app, you might wait for a signal to shut down)
    loop true {
        sleep 10
    }
}

; Run the main function
main

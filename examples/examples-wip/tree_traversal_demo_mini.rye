; tree_traversal_demo.rye
; Demonstrates the use of tree traversal primitives in Rye

; Define a binary tree
binary-tree: dict {
    "value" 10
    "left" dict {
        "value" 5
        "left" dict { "value" 3 "left" nil "right" nil }
        "right" dict { "value" 7 "left" nil "right" nil }
    }
    "right" dict {
        "value" 15
        "left" dict { "value" 12 "left" nil "right" nil }
        "right" dict { "value" 18 "left" nil "right" nil }
    }
}

; Define an n-ary tree
nary-tree: dict {
    "value" "A"
    "children" list {
        dict { "value" "B" "children" list { 
            dict { "value" "E" "children" list { } }
            dict { "value" "F" "children" list { } }
        } }
        dict { "value" "C" "children" list { } }
        dict { "value" "D" "children" list {
            dict { "value" "G" "children" list { } }
        } }
    }
}

; Print header
prn "=== Tree Traversal Primitives Demo ==="
prn ""

; Demonstrate for-tree with binary tree (pre-order traversal)
prn "Binary Tree Pre-order Traversal:"
print "Values: "
for-tree binary-tree 'node { probe true } { node -> "left" } {
    print 123
}
prn ""
prn ""


; tree_traversal_demo.rye
; Demonstrates the use of tree traversal primitives in Rye

; Define a binary tree
binary-tree: dict {
    "value" 10
    "left" dict {
        "value" 5
        "left" dict { "value" 3 "left" nil "right" nil }
        "right" dict { "value" 7 "left" nil "right" nil }
    }
    "right" dict {
        "value" 15
        "left" dict { "value" 12 "left" nil "right" nil }
        "right" dict { "value" 18 "left" nil "right" nil }
    }
}

; Define an n-ary tree
nary-tree: dict {
    "value" "A"
    "children" list {
        dict { "value" "B" "children" list { 
            dict { "value" "E" "children" list { } }
            dict { "value" "F" "children" list { } }
        } }
        dict { "value" "C" "children" list { } }
        dict { "value" "D" "children" list {
            dict { "value" "G" "children" list { } }
        } }
    }
}

; Print header
prn "=== Tree Traversal Primitives Demo ==="
prn ""

; Demonstrate for-tree with binary tree (pre-order traversal)
prn "Binary Tree Pre-order Traversal:"
print "Values: "
for-tree binary-tree 'node { not node = nil } { node -> "left" node -> "right" } {
    print node -> "value" print " "
}
prn ""
prn ""

; Demonstrate for-tree with binary tree (in-order traversal)
prn "Binary Tree In-order Traversal:"
print "Values: "
for-tree binary-tree 'node { node != nil } { list { node -> "left" node -> "right" } } {
    if { node -> "left" = nil } {
        print node -> "value" print " "
    } else {
        ; Only print the value after visiting the left subtree
        if { node .contains* "visited" } {
            print node -> "value" print " "
        } else {
            ; Mark the node as visited and only process the left child
            node:: dict { "value" node -> "value" "left" node -> "left" "right" node -> "right" "visited" true }
            ; Return only the left child to visit first
            return list { node -> "left" }
        }
    }
}
prn ""
prn ""

; Demonstrate for-tree with n-ary tree
prn "N-ary Tree Traversal:"
print "Values: "
for-tree nary-tree 'node { node != nil } { node -> "children" } {
    print node -> "value" print " "
}
prn ""
prn ""

; Demonstrate tree-map with binary tree
prn "Tree Mapping (multiply all values by 2):"
doubled-tree: tree-map binary-tree { * 2 }
print "Original values: "
for-tree binary-tree 'node { node != nil } { node -> "left" node -> "right" } {
    print node -> "value" print " "
}
prn ""
print "Doubled values: "
for-tree doubled-tree 'node { node != nil } { node -> "left" node -> "right" } {
    print node -> "value" print " "
}
prn ""
prn ""

; Demonstrate tree-fold with binary tree
prn "Tree Folding (sum all values):"
sum: tree-fold binary-tree 'acc 0 { + acc }
print "Sum of all values: " prn sum
prn ""

; Demonstrate tree-fold with binary tree (finding max value)
prn "Tree Folding (find max value):"
max-value: tree-fold binary-tree 'acc 0 { max acc }
print "Maximum value: " prn max-value
prn ""

prn "=== End of Demo ==="
